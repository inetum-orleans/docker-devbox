#!/usr/bin/env bash

DOCKER_DEVBOX_HOME="${DOCKER_DEVBOX_HOME:-$HOME/.docker-devbox}"
DOCKER_DEVBOX_BIN="${DOCKER_DEVBOX_HOME}/bin"
DOCKER_DEVBOX_DOT_BIN="${DOCKER_DEVBOX_HOME}/.bin"

if [[ -d "${DOCKER_DEVBOX_HOME}" ]]; then
  _LOG="${DOCKER_DEVBOX_HOME}/docker-devbox-installer.log"
else
  _LOG="${PWD}/docker-devbox-installer.log"
fi

echo "">"$_LOG"

if [[ $EUID -eq 0 ]] && [[ -z "${DOCKER_DEVBOX_ALLOW_ROOT}" ]]
then
  echo "Please run as non-root user or set DOCKER_DEVBOX_ALLOW_ROOT environment variable." 2>&1 | tee -a "$_LOG"
  exit 1
fi

if [[ $EUID -eq 0 ]]; then
  SUDO_EXE=""f68e88eb02f2b3e7e496a26cf1fddba946b818b0
else
  SUDO_EXE=$(command -v sudo)
  if [[ ! -x "$SUDO_EXE" ]]; then
    echo "sudo is not available." 2>&1 | tee -a "$_LOG"
  fi
fi

if [[ ! -x $(command -v docker) ]]; then
  echo "Please install docker and docker-compose before installing docker devbox."
  exit 1
fi

if [[ ! -x $(command -v docker-compose) ]]; then
  echo "Please install docker-compose before installing docker devbox."
  exit 1
fi

if [[ -n "$(command -v apt-get)" ]]; then
  PACKAGE_INSTALL_COMMAND="apt-get -y install"
elif [[ -n "$(command -v yum)" ]]; then
  PACKAGE_INSTALL_COMMAND="yum -y install"
elif [[ -n "$(command -v apk)" ]]; then
  PACKAGE_INSTALL_COMMAND="apk add"
else
  PACKAGE_INSTALL_COMMAND=""
fi

_install_package_if_missing() {
  local PACKAGE="$1"

  if [[ ! -x $(command -v "$PACKAGE") ]]; then
    if [[ ! -x "$SUDO_EXE" && $EUID -ne 0 ]]; then
      echo "Sudo is not available to install $PACKAGE. Install '$PACKAGE' package manually and run the installer again."
      exit 1
    fi
    if [[ -z "$PACKAGE_INSTALL_COMMAND" ]]; then
      echo "No package manager found to install $PACKAGE. Install '$PACKAGE' package manually and run the installer again."
      exit 1
    fi

    echo "Install $PACKAGE" 2>&1 | tee -a "$_LOG"
    $SUDO_EXE $PACKAGE_INSTALL_COMMAND $PACKAGE &>> "$_LOG"
  fi
}

_install_package_if_missing "git"
_install_package_if_missing "make"

if [[ -n "${DOCKER_DEVBOX_CI}" ]]; then
  DOCKER_DEVBOX_MINIMAL=1
  DOCKER_DEVBOX_DISABLE_UPDATE=1
  DOCKER_DEVBOX_DISABLE_OPTIONAL_DEPENDENCIES=1
fi

export DOCKER_DEVBOX_REVERSE_PROXY_NETWORK="${DOCKER_DEVBOX_REVERSE_PROXY_NETWORK:-reverse-proxy}"

DOCKER_DEVBOX_BRANCH="${DOCKER_DEVBOX_BRANCH-master}"

if [[ -d "${DOCKER_DEVBOX_HOME}" ]]; then
    if [[ -z "${DOCKER_DEVBOX_DISABLE_UPDATE}" ]]; then
        echo "Update Docker Devbox" 2>&1 |& tee -a "$_LOG"
        git -C "${DOCKER_DEVBOX_HOME}" fetch --recurse-submodules &>> "$_LOG"
        git -C "${DOCKER_DEVBOX_HOME}" reset --hard "origin/$DOCKER_DEVBOX_BRANCH"  &>> "$_LOG"
        git -C "${DOCKER_DEVBOX_HOME}" submodule foreach --recursive git reset --hard origin/master &>> "$_LOG"
    else
        echo "Docker Devbox update is disabled" 2>&1 |& tee -a "$_LOG"
    fi
else
    echo "Install Docker Devbox" 2>&1 > "$_LOG"
    if [[ -z "${DOCKER_DEVBOX_MINIMAL}" ]]; then
      git clone --recurse-submodules -b "$DOCKER_DEVBOX_BRANCH" https://github.com/inetum-orleans/docker-devbox "${DOCKER_DEVBOX_HOME}"
    else
      git clone https://github.com/inetum-orleans/docker-devbox -b "$DOCKER_DEVBOX_BRANCH" "${DOCKER_DEVBOX_HOME}"
      if [[ -n "${DOCKER_DEVBOX_LEGACY}" ]]; then
        git -C "${DOCKER_DEVBOX_HOME}" submodule update --init scripts
      fi
    fi
fi

mkdir -p $DOCKER_DEVBOX_BIN
mkdir -p $DOCKER_DEVBOX_DOT_BIN

if [[ -f "$HOME/.bashrc" ]]; then
  cat "$HOME/.bashrc" | grep "export PATH=\"$DOCKER_DEVBOX_BIN:$DOCKER_DEVBOX_DOT_BIN:\$PATH\"" &> /dev/null
  BASH_RC_CONFIGURED=$?
  if [[ "$BASH_RC_CONFIGURED" -ne 0 ]]; then
    echo "Add $DOCKER_DEVBOX_BIN to path (.bashrc)" 2>&1 |& tee -a "$_LOG"

    cat << EOF >> "$HOME/.bashrc"

# Add docker-devbox bin to PATH
export PATH="$DOCKER_DEVBOX_BIN:\$PATH"
EOF
  fi
elif [[ -f "$HOME/.bash_profile" ]]; then
  cat "$HOME/.bash_profile" | grep "export PATH=\"$DOCKER_DEVBOX_BIN:\$PATH\"" &> /dev/null
  BASH_PROFILE_CONFIGURED=$?
  if [[ "$BASH_PROFILE_CONFIGURED" -ne 0 ]]; then
    echo "Add $DOCKER_DEVBOX_BIN to path (.bash_profile)" 2>&1 |& tee -a "$_LOG"

    cat << EOF >> "$HOME/.bash_profile"

# Add docker-devbox bin to PATH
export PATH="$DOCKER_DEVBOX_BIN:\$PATH"
EOF
  fi
fi

export PATH="$DOCKER_DEVBOX_BIN:$PATH"
DOCKER_DEVBOX_DDB_ASSET_NAME="${DOCKER_DEVBOX_DDB_ASSET_NAME:-ddb-linux}"

echo "Downloading ddb latest release" 2>&1 |& tee -a "$_LOG"
DOCKER_DEVBOX_BIN_URL=$(curl -fsSL $DOCKER_DEVBOX_CURL_OPTS_GITHUB_API https://api.github.com/repos/inetum-orleans/docker-devbox-ddb/releases/latest \
| grep "browser_download_url.*/$DOCKER_DEVBOX_DDB_ASSET_NAME\"" \
| cut -d : -f 2,3 \
| tr -d \")
curl -fsSL -o "$DOCKER_DEVBOX_BIN/ddb" $DOCKER_DEVBOX_BIN_URL
chmod +x "$DOCKER_DEVBOX_BIN/ddb"

if [[ -n "${DOCKER_DEVBOX_LEGACY}" ]]; then
  if [[ ! -x "$(command -v jq)" ]]; then
    _install_package_if_missing "curl"

    echo "Install jq" 2>&1 |& tee "$_LOG"
    curl -fsSL -o "$DOCKER_DEVBOX_BIN"/jq "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64" &>> "$_LOG"
    chmod +x "$DOCKER_DEVBOX_BIN"/jq &>> "$_LOG"
  fi

  if [[ ! -x "$(command -v yq)" ]]; then
    _install_package_if_missing "curl"

    echo "Install yq" 2>&1 |& tee "$_LOG"
    curl -fsSL -o "$DOCKER_DEVBOX_BIN"/yq "https://github.com/mikefarah/yq/releases/download/2.4.0/yq_linux_amd64" &>> "$_LOG"
    chmod +x "$DOCKER_DEVBOX_BIN"/yq &>> "$_LOG"
  fi
fi

if [[ -z "${DOCKER_DEVBOX_DISABLE_OPTIONAL_DEPENDENCIES}" ]]; then
    _CFSSL_CLI_VERSION=$(curl -fsSL $DOCKER_DEVBOX_CURL_OPTS_GITHUB_API https://api.github.com/repos/Toilal/python-cfssl-cli/releases/latest | grep 'tag_name' | cut -d\" -f4)
    _CFSSL_CLI_INSTALL=1
    if [[ -x "$(command -v cfssl-cli)" ]]; then
      cfssl-cli --version | grep "cfssl-cli, version $_CFSSL_CLI_VERSION" &>> "$_LOG"
      _CFSSL_CLI_INSTALL=$?
    fi

    if [[ "$_CFSSL_CLI_INSTALL" -ne 0 ]]; then
      _install_package_if_missing "curl"

      echo "Install cfssl-cli ($_CFSSL_CLI_VERSION)" 2>&1 |& tee "$_LOG"
      curl -fsSL -o "$DOCKER_DEVBOX_BIN"/cfssl-cli "https://github.com/Toilal/python-cfssl-cli/releases/download/$_CFSSL_CLI_VERSION/cfssl-cli" &>> "$_LOG"
      chmod +x "$DOCKER_DEVBOX_BIN"/cfssl-cli &>> "$_LOG"
    fi

    _MKCERT_VERSION=$(curl -fsSL $DOCKER_DEVBOX_CURL_OPTS_GITHUB_API https://api.github.com/repos/FiloSottile/mkcert/releases/latest | grep 'tag_name' | cut -d\" -f4)
    _MKCERT_INSTALL=1
    if [[ -f "$DOCKER_DEVBOX_BIN"/.mkcert.version ]]; then
        if [[ $(cat "$DOCKER_DEVBOX_BIN"/.mkcert.version) == "${_MKCERT_VERSION}" ]]; then
          _MKCERT_INSTALL=0
        fi
    fi

    if [[ "$_MKCERT_INSTALL" -ne 0 ]]; then
      _install_package_if_missing "curl"

      echo "Install mkcert ($_MKCERT_VERSION)" 2>&1 |& tee "$_LOG"
      curl -fsSL -o "$DOCKER_DEVBOX_BIN"/mkcert "https://github.com/FiloSottile/mkcert/releases/download/$_MKCERT_VERSION/mkcert-$_MKCERT_VERSION-linux-amd64" &>> "$_LOG"
      chmod +x "$DOCKER_DEVBOX_BIN"/mkcert &>> "$_LOG"

      echo "$_MKCERT_VERSION" > "$DOCKER_DEVBOX_BIN"/.mkcert.version
    fi
fi

echo "Create $DOCKER_DEVBOX_REVERSE_PROXY_NETWORK docker network" 2>&1 |& tee -a "$_LOG"
docker network create "$DOCKER_DEVBOX_REVERSE_PROXY_NETWORK" &>> "$_LOG" || true

if [[ -z "${DOCKER_DEVBOX_MINIMAL}" ]]; then
    if [[ -z "${DOCKER_DEVBOX_DISABLE_SMARTCD}" ]]; then
        echo "Install SmartCD" 2>&1 |& tee -a "$_LOG"
        cd /tmp &>> "$_LOG"
        rm -Rf smartcd &>> "$_LOG"
        git clone https://github.com/inetum-orleans/smartcd.git &>> "$_LOG"
        cd smartcd &>> "$_LOG"
        make install &>> "$_LOG"
        source load_smartcd &>> "$_LOG"
        rm -Rf smartcd &>> "$_LOG"
        cd $HOME &>> "$_LOG"

        if [[ ! -f "$HOME/.smartcd_config" ]]; then
            cat << 'EOF' > $HOME/.smartcd_config
# Load and configure smartcd
source $HOME/.smartcd/lib/core/arrays
source $HOME/.smartcd/lib/core/varstash
source $HOME/.smartcd/lib/core/smartcd
# smartcd setup chpwd-hook
smartcd setup cd
smartcd setup pushd
smartcd setup popd
# smartcd setup prompt-hook
# smartcd setup exit-hook
smartcd setup completion
# VARSTASH_AUTOCONFIGURE=1
# VARSTASH_AUTOEDIT=1
# SMARTCD_NO_INODE=1
# SMARTCD_AUTOMIGRATE=1
SMARTCD_LEGACY=1
SMARTCD_QUIET=1
# VARSTASH_QUIET=1
EOF
            echo "SmartCD configuration file has been written (~/.smartcd_config)" 2>&1 |& tee -a "$_LOG"
        fi

        cat $HOME/.bashrc | grep .smartcd_config &> /dev/null
        BASHRC_CONFIGURED=$?
        if [[ "$BASHRC_CONFIGURED" -ne 0 ]]; then
            cat << 'EOF' >> "$HOME/.bashrc"

# SmartCD Configuration
[ -r "$HOME/.smartcd_config" ] && ( [ -n $BASH_VERSION ] || [ -n $ZSH_VERSION ] ) && source $HOME/.smartcd_config
EOF
            echo "SmartCD registered (~/.bashrc)" 2>&1 |& tee -a "$_LOG"
        fi
    else
        echo "SmartCD is disabled" 2>&1 |& tee -a "$_LOG"
    fi

    echo "Cleanup project configuration files" &>> "$_LOG"
    rm -f "$DOCKER_DEVBOX_HOME"/traefik/acme.json &>> "$_LOG"
    rm -f "$DOCKER_DEVBOX_HOME"/traefik/config/*.toml &>> "$_LOG"
    rm -f "$DOCKER_DEVBOX_HOME"/certs/*.crt &>> "$_LOG"
    rm -f "$DOCKER_DEVBOX_HOME"/certs/*.key &>> "$_LOG"

    if [[ -z "${DOCKER_DEVBOX_DISABLE_REVERSE_PROXY}" ]]; then
        echo "Use traefik as reverse proxy"
        cd "${DOCKER_DEVBOX_HOME}"/traefik &>> "$_LOG"
        echo "Stop traefik" 2>&1 |& tee -a "$_LOG"
        docker-compose down --remove-orphans &>> "$_LOG"
        echo "Install traefik" 2>&1 |& tee -a "$_LOG"
        touch acme.json
        ddb configure &>> "$_LOG" || true
        docker-compose pull &>> "$_LOG" || true
        echo "Start traefik" 2>&1 |& tee -a "$_LOG"
        docker-compose up --build -d &>> "$_LOG"
        cd $HOME &>> "$_LOG"
    else
        echo "Reverse proxy is disabled" 2>&1 |& tee -a "$_LOG"
    fi

    cd "${DOCKER_DEVBOX_HOME}"/cfssl &>> "$_LOG"
    echo "Stop CFSSL" 2>&1 |& tee -a "$_LOG"
    docker-compose down --remove-orphans &>> "$_LOG"
    if [[ -z "${DOCKER_DEVBOX_DISABLE_CFSSL}" ]]; then
       echo "Install CFSSL" 2>&1 |& tee -a "$_LOG"
       ddb configure &>> "$_LOG" || true
       docker-compose pull &>> "$_LOG" || true
       echo "Start CFSSL" 2>&1 |& tee -a "$_LOG"
       docker-compose up --build -d &>> "$_LOG"
    else
        echo "CFSSL is disabled" 2>&1 |& tee -a "$_LOG"
    fi
    cd $HOME &>> "$_LOG"

    cd "${DOCKER_DEVBOX_HOME}"/portainer &>> "$_LOG"
    echo "Stop portainer" 2>&1 |& tee -a "$_LOG"
    docker-compose down --remove-orphans &>> "$_LOG"
    if [[ -z "${DOCKER_DEVBOX_DISABLE_PORTAINER}" ]]; then
         echo "Install portainer" 2>&1 |& tee -a "$_LOG"
         ddb configure &>> "$_LOG" || true
         docker-compose pull &>> "$_LOG" || true
         echo "Start portainer" 2>&1 |& tee -a "$_LOG"
         docker-compose up --build -d &>> "$_LOG"
    else
        echo "Portainer is disabled" 2>&1 |& tee -a "$_LOG"
    fi
    cd $HOME &>> "$_LOG"

    echo "Docker Devbox installation is terminated." 2>&1 |& tee -a "$_LOG"
else
    echo "Docker Devbox installation is terminated (minimal)." 2>&1 |& tee -a "$_LOG"
fi

if [[ -f $HOME/.smartcd_config ]]; then
  source $HOME/.smartcd_config
fi
